;;made by https://github.com/TurleesFr
;;updated by https://github.com/TurleesFr
;; thank you https://github.com/Mon4sm for helping me out a bit

(defpoll sys_uptime :interval "60s" "scripts/uptime.sh")
(defpoll username :interval "60s" "whoami")
(deflisten vol "sh ~/.config/eww/scripts/VolScale.sh")
(deflisten media "sh ~/.config/eww/scripts/media-listen.sh")

(defwindow bar
  :monitor 0
  :geometry (geometry :x "0.1%"
                      :y "0%"
                      :width "1.8%"
                      :height "99%"
                      :anchor "right center")
  :stacking "fg"
  :exclusive true
  :focusable "ondemand"
  :namespace "EWW-Bar"
(box :class "windbar"
:vexpand false
:hexpand false
(bar)
))

(defvar mainrev false)

(defwidget bar []
  (box :orientation "v"
  :space-evenly false
    (eventbox
    :onclick "eww update mainrev=${mainrev==true?false:true}; \
    if [ ${mainrev} = true ]; then eww close main; else eww open main; fi"
      (label :text "" :class "bar-button" :style "color: #e78a4e"))
    (label :text "${vol==0 ? '' : vol<50 ? '' : ''}" :style "color: #89b482")
  (scale
  :flipped true
  :orientation "v"
  :class "volume"
  :value vol
  :min 0
  :max 101
  :round-digits: "1"
  :onchange "pamixer --set-volume {}")))


(defwindow main
  :monitor 0
  :geometry (geometry :x "0.2%"
                      :y "0.7%"
                      :width "16%"
                      :height "33%"
                      :anchor "top right")
  :stacking "overlay"
(box 
  :class "profile-menu"
(profile)))

(defwidget profile []
  (box :class "everything"
  :space-evenly false
  :orientation "vertical"
  :updates true
  (box :class "profile"
  :orientation "horizontal"
  :space-evenly false
  :spacing 10
(box
  :space-evenly false
  :halign "start"
  :valign "center"
  :class "profile-pic")
  (box :orientation "vertical"
  :class "userstuff"
  (label :text "--${username}" :halign "center" :valign "center"
  :class "user")
  (label :text "Uptime: ${sys_uptime}" :halign "start" :valign "start"
  :class "uptime")
  (box :class "power"
  :space-evenly true
  :orientation "horizontal"
  (box :class "shutdown"
  (eventbox
  :onclick "systemctl poweroff"
  (label :text "" :style " color: #ea6962")))

  (box :class "reboot"
  (eventbox
  :onclick "systemctl reboot"
  (label :text "" :style " color: #e78a4e")))

  (box :class "suspend"
  (eventbox
    :onclick "systemctl suspend"
  (label :text "󰤄" :style " color: #d8a657")))

  (box :class "logout"
  (eventbox
  :onclick "hyprctl dispatch exit"
  (label :text "" :style " color: #7daea3")))
)))
(label :text " ")
(box :orientation "vertical" :class "monitor"
  :space-evenly false
  (label :text "System" :class "System-label")
  (box :class "DonutContainer"
  :vexpand false
  :hexpand false
  :space-evenly true
  :spacing 10
  (box :class "cpu" :orientation "v"
  :space-evenly false
  (overlay :space-evenly false
    (circular-progress
    :width 100
    :class "donut"
    :height 100
    :thickness 15
    :value {round(EWW_CPU.avg, 10)})
    (label :text "" :style "font-size: 36px;" :class "cpu1"))
    (box :orientation "v"
    (label :text "Cpu usage:")
    (label :text "${round(EWW_CPU.avg, 1)}%")))
  
    (box :class "ram" :orientation "v"
  :space-evenly false
  (overlay :space-evenly false
    (circular-progress
    :width 100
    :class "donut"
    :height 100
    :thickness 15
    :value {round(EWW_RAM.used_mem_perc, 10)})
    (label :text "" :style "font-size: 36px;" :class "ram1"))
    (box :orientation "v"
    (label :text "Used Ram:")
    (label :text "${round(EWW_RAM.used_mem_perc, 1)}%")))
    
    (box :class "disk" :orientation "v"
  :space-evenly false
  (overlay :space-evenly false
    (circular-progress
    :width 100
    :class "donut"
    :height 100
    :thickness 15
    :value {round(EWW_DISK["/home"].used_perc, 10)})
    (label :text "󱊞" :style "font-size: 36px;" :class "disk1"))
    (box :orientation "v"
    (label :text "Storage used:")
    (label :text "${round(EWW_DISK["/home"].used / (1024*1024*1024), 1)} GB")))
  )
  (label :text " ")
(box :direction "h" :class "Net"
(label :text " ${round(EWW_NET.wlan0.NET_DOWN / 1024, 1 )} kB/s" :class "netdown")
(label :text " ${round(EWW_NET.wlan0.NET_UP / 1024, 1 )} kB/s" :class "netup"))
  (label :text " ")
)
))


